// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username String  @id @db.VarChar(100)
  password String  @db.VarChar(255)
  email    String  @unique
  name     String  @db.VarChar(255)
  token    String? @db.VarChar(255)
  role     Role    @default(USER)
  phone    String  @db.VarChar(15)
  address  String? @db.VarChar(255)

  created_at DateTime  @default(now())
  order      Order[]
  Payment    Payment[]

  @@map("users")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  products Product[]

  @@map("categories")
}

model Product {
  id          Int    @id @default(autoincrement())
  code        String @unique @db.VarChar(15)
  name        String @unique @db.VarChar(100)
  price       Float
  stock       Int
  weight      Int
  description String @db.VarChar(1000)

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  supplier_id Int
  supplier    Supplier @relation(fields: [supplier_id], references: [id])

  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now()) @updatedAt
  Order_detail OrderDetail[]

  @@map("products")
}

model Order {
  id Int @id @default(autoincrement())

  username   String
  user       User   @relation(fields: [username], references: [username])
  buyer_name String @db.VarChar(100)

  shipper_id Int
  shipper    Shipper @relation(fields: [shipper_id], references: [id])

  order_date    DateTime  @default(now())
  required_date DateTime
  shipped_date  DateTime?

  shipping_name    String @db.VarChar(100)
  shipping_address String @db.VarChar(500)
  shipping_phone   String @db.VarChar(25)
  shipper_name     String @db.VarChar(25)

  comment String?

  status OrderStatus @default(In_Process)

  total_quantity        Int
  total_weight          Int
  total_product_amount  Float
  total_shipping_cost   Float
  total_shopping_amount Float
  service_charge        Float
  total_amount          Float

  payment_id Int      @unique
  payment    Payment?

  order_details OrderDetail[]

  @@map("orders")
}

model OrderDetail {
  id Int @id @default(autoincrement())

  order_id Int
  order    Order @relation(fields: [order_id], references: [id])

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  product_name       String @db.VarChar(255)
  product_price_each Float
  product_weight     Int
  quantity_ordered   Float

  @@map("orderDetails")
}

model Supplier {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(100)
  phone   String  @db.VarChar(15)
  address String? @db.VarChar(255)

  products Product[]

  @@map("suppliers")
}

model Shipper {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(100)
  phone String  @db.VarChar(15)
  order Order[]

  @@map("shippers")
}

model Payment {
  id       Int    @id @default(autoincrement())
  username String
  user     User   @relation(fields: [username], references: [username])

  order_id Int   @unique
  order    Order @relation(fields: [order_id], references: [id])

  status PaymentStatus @default(PENDING)

  payment_method String   @db.VarChar(100)
  payment_date   DateTime
  amount         Float
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  Paid
  In_Process
  Shipped
  Cancelled
  Completed
}

enum PaymentStatus {
  PENDING
  COMPLETED
}
